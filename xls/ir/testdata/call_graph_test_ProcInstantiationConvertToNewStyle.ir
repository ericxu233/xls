package test_module

file_number 0 "proc_iota.x"

chan proc_iota__my_chan(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive, fifo_depth=1, bypass=true, register_push_outputs=true, register_pop_outputs=false)

fn __proc_iota__producer.init() -> bits[32] {
  ret literal.1: bits[32] = literal(value=0, id=1, pos=[(0,21,11)])
}

fn __proc_iota__consumer.init__2() -> bits[32] {
  N: bits[32] = literal(value=2, id=2, pos=[(0,30,14)])
  ret literal.3: bits[32] = literal(value=0, id=3, pos=[(0,35,11)])
}

top proc __proc_iota__main_0_next(__state: (), init={()}) {
  __state: () = state_read(state_element=__state, id=5)
  tuple.7: () = tuple(id=7, pos=[(0,53,22)])
  __token: token = literal(value=token, id=4)
  literal.6: bits[1] = literal(value=1, id=6)
  next_value.8: () = next_value(param=__state, value=tuple.7, id=8)
}

proc __proc_iota__main__producer_0_next(__state: bits[32], init={0}) {
  __state: bits[32] = state_read(state_element=__state, id=10)
  literal.12: bits[32] = literal(value=1, id=12, pos=[(0,24,22)])
  after_all.14: token = after_all(id=14)
  foo: bits[32] = add(__state, literal.12, id=13, pos=[(0,24,18)])
  literal.11: bits[1] = literal(value=1, id=11)
  __token: token = literal(value=token, id=9)
  tok: token = send(after_all.14, foo, predicate=literal.11, channel=proc_iota__my_chan, id=15)
  next_value.16: () = next_value(param=__state, value=foo, id=16)
}

proc __proc_iota__main__consumer_0__2_next(__state: bits[32], init={0}) {
  after_all.21: token = after_all(id=21)
  literal.19: bits[1] = literal(value=1, id=19)
  receive.22: (token, bits[32]) = receive(after_all.21, predicate=literal.19, channel=proc_iota__my_chan, id=22)
  __state: bits[32] = state_read(state_element=__state, id=18)
  e: bits[32] = tuple_index(receive.22, index=1, id=25, pos=[(0,38,18)])
  add.26: bits[32] = add(__state, e, id=26, pos=[(0,39,8)])
  N: bits[32] = literal(value=2, id=20, pos=[(0,30,14)])
  add.27: bits[32] = add(add.26, N, id=27, pos=[(0,39,8)])
  __token: token = literal(value=token, id=17)
  tuple_index.23: token = tuple_index(receive.22, index=0, id=23)
  tok: token = tuple_index(receive.22, index=0, id=24, pos=[(0,38,13)])
  next_value.28: () = next_value(param=__state, value=add.27, id=28)
}
