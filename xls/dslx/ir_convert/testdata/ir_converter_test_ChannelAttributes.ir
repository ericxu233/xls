package test_module

file_number 0 "test_module.x"

chan test_module__my_chan0(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive, fifo_depth=0, bypass=true, register_push_outputs=false, register_pop_outputs=false)
chan test_module__my_chan1(bits[32], id=1, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive, fifo_depth=1, bypass=false, register_push_outputs=true, register_pop_outputs=true)
chan test_module__my_chan2(bits[32], id=2, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive, fifo_depth=0, bypass=true, register_push_outputs=false, register_pop_outputs=false, input_flop_kind=zero_latency, output_flop_kind=flop)

fn __test_module__producer.init() -> bits[32] {
  ret literal.1: bits[32] = literal(value=0, id=1)
}

fn __test_module__consumer.init() -> bits[32] {
  ret literal.2: bits[32] = literal(value=0, id=2)
}

proc __test_module__main_0_next(__state: (), init={()}) {
  __state: () = state_read(state_element=__state, id=4)
  tuple.6: () = tuple(id=6)
  __token: token = literal(value=token, id=3)
  literal.5: bits[1] = literal(value=1, id=5)
  next_value.7: () = next_value(param=__state, value=tuple.6, id=7)
}

proc __test_module__main__producer_0_next(__state: bits[32], init={0}) {
  __state: bits[32] = state_read(state_element=__state, id=9)
  literal.13: bits[32] = literal(value=1, id=13)
  after_all.11: token = after_all(id=11)
  literal.10: bits[1] = literal(value=1, id=10)
  add.14: bits[32] = add(__state, literal.13, id=14)
  __token: token = literal(value=token, id=8)
  tok: token = send(after_all.11, __state, predicate=literal.10, channel=test_module__my_chan0, id=12)
  next_value.15: () = next_value(param=__state, value=add.14, id=15)
}

proc __test_module__main__consumer_0_next(__state: bits[32], init={0}) {
  after_all.19: token = after_all(id=19)
  literal.18: bits[1] = literal(value=1, id=18)
  receive.20: (token, bits[32]) = receive(after_all.19, predicate=literal.18, channel=test_module__my_chan0, id=20)
  i: bits[32] = tuple_index(receive.20, index=1, id=23)
  __state: bits[32] = state_read(state_element=__state, id=17)
  add.24: bits[32] = add(i, i, id=24)
  __token: token = literal(value=token, id=16)
  tuple_index.21: token = tuple_index(receive.20, index=0, id=21)
  tok: token = tuple_index(receive.20, index=0, id=22)
  next_value.25: () = next_value(param=__state, value=add.24, id=25)
}

proc __test_module__main__producer_1_next(__state: bits[32], init={0}) {
  __state: bits[32] = state_read(state_element=__state, id=27)
  literal.31: bits[32] = literal(value=1, id=31)
  after_all.29: token = after_all(id=29)
  literal.28: bits[1] = literal(value=1, id=28)
  add.32: bits[32] = add(__state, literal.31, id=32)
  __token: token = literal(value=token, id=26)
  tok: token = send(after_all.29, __state, predicate=literal.28, channel=test_module__my_chan1, id=30)
  next_value.33: () = next_value(param=__state, value=add.32, id=33)
}

proc __test_module__main__consumer_1_next(__state: bits[32], init={0}) {
  after_all.37: token = after_all(id=37)
  literal.36: bits[1] = literal(value=1, id=36)
  receive.38: (token, bits[32]) = receive(after_all.37, predicate=literal.36, channel=test_module__my_chan1, id=38)
  i: bits[32] = tuple_index(receive.38, index=1, id=41)
  __state: bits[32] = state_read(state_element=__state, id=35)
  add.42: bits[32] = add(i, i, id=42)
  __token: token = literal(value=token, id=34)
  tuple_index.39: token = tuple_index(receive.38, index=0, id=39)
  tok: token = tuple_index(receive.38, index=0, id=40)
  next_value.43: () = next_value(param=__state, value=add.42, id=43)
}

proc __test_module__main__producer_2_next(__state: bits[32], init={0}) {
  __state: bits[32] = state_read(state_element=__state, id=45)
  literal.49: bits[32] = literal(value=1, id=49)
  after_all.47: token = after_all(id=47)
  literal.46: bits[1] = literal(value=1, id=46)
  add.50: bits[32] = add(__state, literal.49, id=50)
  __token: token = literal(value=token, id=44)
  tok: token = send(after_all.47, __state, predicate=literal.46, channel=test_module__my_chan2, id=48)
  next_value.51: () = next_value(param=__state, value=add.50, id=51)
}

proc __test_module__main__consumer_2_next(__state: bits[32], init={0}) {
  after_all.55: token = after_all(id=55)
  literal.54: bits[1] = literal(value=1, id=54)
  receive.56: (token, bits[32]) = receive(after_all.55, predicate=literal.54, channel=test_module__my_chan2, id=56)
  i: bits[32] = tuple_index(receive.56, index=1, id=59)
  __state: bits[32] = state_read(state_element=__state, id=53)
  add.60: bits[32] = add(i, i, id=60)
  __token: token = literal(value=token, id=52)
  tuple_index.57: token = tuple_index(receive.56, index=0, id=57)
  tok: token = tuple_index(receive.56, index=0, id=58)
  next_value.61: () = next_value(param=__state, value=add.60, id=61)
}
