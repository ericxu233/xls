package test_module

file_number 0 "test_module.x"

top proc __test_module__main_0_next<in_param: bits[32] in>(__state: bits[32], init={1}) {
  chan_interface in_param(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=ready_valid, flop_kind=none)
  __state: bits[32] = state_read(state_element=__state, id=2)
  literal.7: bits[32] = literal(value=20, id=7)
  literal.3: bits[1] = literal(value=1, id=3)
  eq.8: bits[1] = eq(__state, literal.7, id=8)
  literal.6: token = literal(value=token, id=6)
  and.10: bits[1] = and(literal.3, eq.8, id=10)
  receive.11: (token, bits[32], bits[1]) = receive(literal.6, predicate=and.10, channel=in_param, blocking=false, id=11)
  tuple_index.14: bits[1] = tuple_index(receive.11, index=2, id=14)
  literal.9: bits[32] = literal(value=42, id=9)
  tuple_index.13: bits[32] = tuple_index(receive.11, index=1, id=13)
  tuple_index.12: token = tuple_index(receive.11, index=0, id=12)
  sel.15: bits[32] = sel(tuple_index.14, cases=[literal.9, tuple_index.13], id=15)
  tuple.16: (token, bits[32], bits[1]) = tuple(tuple_index.12, sel.15, tuple_index.14, id=16)
  in_param: bits[32] = recv_channel_end(id=4)
  result: bits[32] = tuple_index(tuple.16, index=1, id=18)
  __token: token = literal(value=token, id=1)
  tuple.5: (bits[32]) = tuple(in_param, id=5)
  tuple_index.17: token = tuple_index(tuple.16, index=0, id=17)
  tuple_index.19: bits[1] = tuple_index(tuple.16, index=2, id=19)
  next_value.20: () = next_value(param=__state, value=result, id=20)
}
