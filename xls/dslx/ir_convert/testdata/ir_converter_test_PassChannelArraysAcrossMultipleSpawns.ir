package test_module

file_number 0 "test_module.x"

chan test_module__ins_outs__0(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
chan test_module__ins_outs__1(bits[32], id=1, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
chan test_module__ins_outs__2(bits[32], id=2, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
chan test_module__ins_outs__3(bits[32], id=3, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)

fn __test_module__SomeProc.init__4() -> () {
  N: bits[32] = literal(value=4, id=1)
  ret tuple.2: () = tuple(id=2)
}

fn __test_module__SomeOtherProc.init__4() -> () {
  N: bits[32] = literal(value=4, id=3)
  ret tuple.4: () = tuple(id=4)
}

top proc __test_module__YetAnotherProc_0_next(__state: (), init={()}) {
  literal.8: token = literal(value=token, id=8)
  literal.9: bits[32] = literal(value=0, id=9)
  literal.7: bits[1] = literal(value=1, id=7)
  literal.12: token = literal(value=token, id=12)
  literal.13: bits[32] = literal(value=1, id=13)
  literal.16: token = literal(value=token, id=16)
  literal.17: bits[32] = literal(value=2, id=17)
  literal.20: token = literal(value=token, id=20)
  literal.21: bits[32] = literal(value=3, id=21)
  __state: () = state_read(state_element=__state, id=6)
  __token: token = literal(value=token, id=5)
  send.10: token = send(literal.8, literal.9, predicate=literal.7, channel=test_module__ins_outs__0, id=10)
  tuple.11: () = tuple(id=11)
  send.14: token = send(literal.12, literal.13, predicate=literal.7, channel=test_module__ins_outs__1, id=14)
  tuple.15: () = tuple(id=15)
  send.18: token = send(literal.16, literal.17, predicate=literal.7, channel=test_module__ins_outs__2, id=18)
  tuple.19: () = tuple(id=19)
  send.22: token = send(literal.20, literal.21, predicate=literal.7, channel=test_module__ins_outs__3, id=22)
  tuple.23: () = tuple(id=23)
  next_value.24: () = next_value(param=__state, value=__state, id=24)
}

proc __test_module__YetAnotherProc__SomeOtherProc_0__SomeProc_0__4_next(__state: (), init={()}) {
  literal.29: token = literal(value=token, id=29)
  literal.27: bits[1] = literal(value=1, id=27)
  literal.36: token = literal(value=token, id=36)
  literal.43: token = literal(value=token, id=43)
  literal.50: token = literal(value=token, id=50)
  receive.30: (token, bits[32]) = receive(literal.29, predicate=literal.27, channel=test_module__ins_outs__0, id=30)
  receive.37: (token, bits[32]) = receive(literal.36, predicate=literal.27, channel=test_module__ins_outs__1, id=37)
  receive.44: (token, bits[32]) = receive(literal.43, predicate=literal.27, channel=test_module__ins_outs__2, id=44)
  receive.51: (token, bits[32]) = receive(literal.50, predicate=literal.27, channel=test_module__ins_outs__3, id=51)
  __token: token = literal(value=token, id=25)
  v: bits[32] = tuple_index(receive.30, index=1, id=33)
  v__1: bits[32] = tuple_index(receive.37, index=1, id=40)
  v__2: bits[32] = tuple_index(receive.44, index=1, id=47)
  v__3: bits[32] = tuple_index(receive.51, index=1, id=54)
  __state: () = state_read(state_element=__state, id=26)
  N: bits[32] = literal(value=4, id=28)
  tuple_index.31: token = tuple_index(receive.30, index=0, id=31)
  tuple_index.32: token = tuple_index(receive.30, index=0, id=32)
  trace.34: token = trace(__token, literal.27, format="recv: {}", data_operands=[v], id=34)
  tuple.35: () = tuple(id=35)
  tuple_index.38: token = tuple_index(receive.37, index=0, id=38)
  tuple_index.39: token = tuple_index(receive.37, index=0, id=39)
  trace.41: token = trace(__token, literal.27, format="recv: {}", data_operands=[v__1], id=41)
  tuple.42: () = tuple(id=42)
  tuple_index.45: token = tuple_index(receive.44, index=0, id=45)
  tuple_index.46: token = tuple_index(receive.44, index=0, id=46)
  trace.48: token = trace(__token, literal.27, format="recv: {}", data_operands=[v__2], id=48)
  tuple.49: () = tuple(id=49)
  tuple_index.52: token = tuple_index(receive.51, index=0, id=52)
  tuple_index.53: token = tuple_index(receive.51, index=0, id=53)
  trace.55: token = trace(__token, literal.27, format="recv: {}", data_operands=[v__3], id=55)
  tuple.56: () = tuple(id=56)
  next_value.57: () = next_value(param=__state, value=__state, id=57)
}

proc __test_module__YetAnotherProc__SomeOtherProc_0__4_next(__state: (), init={()}) {
  __state: () = state_read(state_element=__state, id=59)
  tuple.62: () = tuple(id=62)
  __token: token = literal(value=token, id=58)
  literal.60: bits[1] = literal(value=1, id=60)
  N: bits[32] = literal(value=4, id=61)
  next_value.63: () = next_value(param=__state, value=tuple.62, id=63)
}
